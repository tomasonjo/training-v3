import com.neo4j.gradle.s3.S3Plugin
import com.neo4j.gradle.s3.S3UploadTask
import com.amazonaws.services.s3.model.CannedAccessControlList
import com.neo4j.gradle.asciidoctor.AsciidoctorModuleDescriptorPlugin
import com.neo4j.gradle.asciidoctor.AsciidoctorModuleDescriptorGenerateTask
import com.neo4j.gradle.wordpress.WordPressPlugin
import com.neo4j.gradle.wordpress.WordPressUploadTask
import org.asciidoctor.gradle.jvm.AsciidoctorTask
import org.asciidoctor.gradle.jvm.pdf.AsciidoctorPdfTask
import org.asciidoctor.gradle.jvm.slides.AsciidoctorJRevealJSTask
import org.kordamp.gradle.livereload.LiveReloadTask

plugins {
  id 'org.asciidoctor.jvm.gems' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.convert' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.pdf' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.revealjs' version '3.1.0' apply false
  id 'org.kordamp.gradle.livereload' version '0.2.1' apply false
  id 'com.neo4j.gradle.wordpress.WordPressPlugin' version '0.0.4' apply false
  id 'com.neo4j.gradle.s3.S3Plugin' version '0.1.1' apply false
}

subprojects {

  apply plugin: 'org.asciidoctor.jvm.gems'
  apply plugin: 'org.asciidoctor.jvm.revealjs'
  apply plugin: S3Plugin
  apply plugin: WordPressPlugin
  apply plugin: AsciidoctorModuleDescriptorPlugin

  dependencies {
    asciidoctorGems 'rubygems:rouge:3.18.0'
    asciidoctorGems 'rubygems:neo4j-asciidoctor-extensions:0.2.0'
  }

  repositories {
    mavenCentral()
    jcenter()
    ruby {
      gems()
    }
  }

  def stage = project.findProperty('stage')

  def enrollmentUrl = {
    switch (project.name) {
      case "4.0-intro-neo4j":
        "https://neo4j.com/graphacademy/online-training/${stage != 'production' ? '_testing_' : ''}introduction-to-neo4j-40/"
        break
      case "4.0-neo4j-admin":
        "https://neo4j.com/graphacademy/online-training/${stage != 'production' ? '_testing_' : ''}basic-neo4j-admin-40/"
        break
      case "graph-data-modeling":
        "https://neo4j.com/graphacademy/online-training/${stage != 'production' ? '_testing_' : ''}graph-data-modeling/"
        break
      case "4.0-implementing-graph-data-models":
        "https://neo4j.com/graphacademy/online-training/${stage != 'production' ? '_testing_' : ''}implementing-graph-data-models-40/"
        break
      case "gds-applied-algos":
        "https://neo4j.com/graphacademy/online-training/${stage != 'production' ? '_testing_' : ''}applied-gds-web-apps/"
        break
      case "online-training-v2":
        "https://neo4j.com/graphacademy/online-training/${stage != 'production' ? '_testing_' : ''}introduction-to-neo4j/"
        break
      case "neo4j-administration":
        "https://neo4j.com/graphacademy/online-training/${stage != 'production' ? '_testing_' : ''}neo4j-administration/"
        break
      case "4.0-cypher-query-tuning":
        "https://neo4j.com/graphacademy/online-training/${stage != 'production' ? '_testing_' : ''}cypher-query-tuning-40/"
        break
      default:
        "https://neo4j.com/"
    }
  }

  def courseUrl = {
    switch (project.name) {
      case "4.0-intro-neo4j":
        "https://neo4j.com/graphacademy/online-training/v4/${stage != 'production' ? '_testing_' : ''}00-intro-neo4j-about/"
        break
      case "4.0-neo4j-admin":
        "https://neo4j.com/graphacademy/online-training/v4/${stage != 'production' ? '_testing_' : ''}00-basic-neo4j-admin-about/"
        break
      case "graph-data-modeling":
        "https://neo4j.com/graphacademy/online-training/v4/${stage != 'production' ? '_testing_' : ''}00-graph-data-modeling-about/"
        break
      case "4.0-implementing-graph-data-models":
        "https://neo4j.com/graphacademy/online-training/v4/${stage != 'production' ? '_testing_' : ''}00-igdm-40-implementing-graph-data-models-about/"
        break
      case "gds-applied-algos":
        "https://neo4j.com/graphacademy/online-training/v4/${stage != 'production' ? '_testing_' : ''}00-gdsaa-about-this-course/"
        break
      case "online-training-v2":
        "https://neo4j.com/graphacademy/online-training/v4/${stage != 'production' ? '_testing_' : ''}00-introneo-3-5-about/"
        break
      case "neo4j-administration":
        "https://neo4j.com/graphacademy/online-training/v4/${stage != 'production' ? '_testing_' : ''}00-neo4jadmin-3-5-about/"
        break
      case "4.0-cypher-query-tuning":
        "https://neo4j.com/graphacademy/online-training/v4/${stage != 'production' ? '_testing_' : ''}00-cqt-40-about/"
        break
      default:
        "https://neo4j.com/"
    }
  }

  s3 {
    profile = project.hasProperty('s3-profile') ? project.property('s3-profile') : 'default'
    region = 'us-east-1'
  }

  wordpress {
    username = project.hasProperty('wordpress-username') ? project.property('wordpress-username') : 'neo'
    password = project.hasProperty('wordpress-password') ? project.property('wordpress-password') : ''
    host = project.hasProperty('wordpress-host') ? project.property('wordpress-host') : 'localhost'
    scheme = 'https'
  }

  asciidoctorj {
    gemPaths "${rootProject.buildDir}/.asciidoctorGems"
    attributes 'allow-uri-read': '',
      'stage': stage != null ? stage : '',
      'source-highlighter': 'rouge',
      'rouge-style': 'neo.forest',
      'presenter': 'Neo Technology',
      'twitter': 'neo4j',
      'email': 'info@neotechnology.com',
      'neo4j-version': '4.0',
      'currentyear': '2020',
      'experimental': '',
      'manual': 'http://neo4j.com/docs/developer-manual/current',
      'manual-cypher': '{manual}/cypher',
      'module-enrollment-url': enrollmentUrl,
      'document-metadata-attrs-include': 'author,slug,parent-path,categories*,tags*,taxonomies*<>'
  }

  asciidoctorGemsPrepare.with {
    outputDir = "${rootProject.buildDir}/.asciidoctorGems"
  }

  revealjs {
    version = '4.0.1'
    templateGitHub {
      organisation = 'hakimel'
      repository = 'reveal.js'
      tag = '3.9.2'
    }
  }

  revealjsPlugins {
    github 'denehyg', {
      organisation = 'denehyg'
      repository = 'reveal.js-menu'
      branch = 'master'
    }
    github 'rajgoel', {
      organisation = 'rajgoel'
      repository = 'reveal.js-plugins'
      branch = 'master'
    }
  }

  task generateModuleDescriptor(type: AsciidoctorModuleDescriptorGenerateTask) {
    source = fileTree(dir: "${projectDir}/docs", include: '**/*.adoc', exclude: 'enrollment.adoc')
    outputDir "${projectDir}/build/online"
    moduleName stage != 'production' ? "_testing_${project.name}" : project.name
  }

  // for debugging purpose
  task convertStandaloneHtml(type: AsciidoctorTask) {
    dependsOn asciidoctorGemsPrepare, generateModuleDescriptor

    inputs.dir "${rootProject.projectDir}/resources/templates"

    asciidoctorj {
      options template_dirs: ["${rootProject.projectDir}/resources/templates"]
      attributes 'imagesdir': 'images',
        'sectanchors': ''
    }

    baseDir file("${projectDir}/docs")
    sourceDir file("${projectDir}/docs")
    sources {
      exclude 'enrollment.adoc'
    }
    outputDir file("${projectDir}/build/standalone")

    resources {
      from("${rootProject.projectDir}/resources/images") {
        include '**'
        into 'images'
      }
      from("${projectDir}/images") {
        include '**'
        into 'images'
      }
    }
  }

  afterEvaluate { Project project ->
    if (project.hasProperty("browserGuides")) {
      task convertBrowserGuideHtml(type: AsciidoctorTask) {
        dependsOn asciidoctorGemsPrepare

        inputs.dir "${rootProject.projectDir}/resources/templates/browser-guide"

        def baseUrl = {
          switch (stage) {
            case 'production':
              return "https://guides.neo4j.com/${project.name}"
            case 'preview':
              return "http://localhost:35729/browser-guide"
            default:
              return "./${project.name}"
          }
        }

        def imagesDir = {
          switch (stage) {
            case 'production':
              return "https://guides.neo4j.com/${project.name}/images"
            case 'preview':
              return "http://localhost:35729/browser-guide/images"
            default:
              return "http://localhost:3000/images/"
          }
        }

        asciidoctorj {
          options template_dirs: ["${rootProject.projectDir}/resources/templates/browser-guide"]
          attributes 'imagesdir': imagesDir,
            'allow-uri-read': '',
            'guides': baseUrl,
            'icons': 'font',
            'current': baseUrl,
            'csv-url': baseUrl,
            'leveloffset': '+1',
            'env-guide': '',
            'env-training': '',
            'guide': '',
            'sectanchors': ''
        }

        resources {
          from("${projectDir}/images") {
            include '**'
            into 'images'
          }
        }

        baseDir file("${projectDir}/docs")
        sourceDir file("${projectDir}/docs")
        outputDir file("${projectDir}/build/browser-guide")
      }

      if (new File("${projectDir}/images").exists()) {
        if (stage == 'production') {
          task s3UploadContent(type: S3UploadTask) {
            dependsOn convertBrowserGuideHtml

            // uncomment this if you want to replace files in guides.neo4j.com
            overwrite = true
            source = "${projectDir}/build/browser-guide"
            bucket = "guides.neo4j.com/${project.name}"
            destination = ""
            acl.set(CannedAccessControlList.PublicRead)
          }
        }
      }
    } else {
      if (new File("${projectDir}/images").exists()) {
        if (stage == 'production') {
          task s3UploadImages(type: S3UploadTask) {
            //overwrite = true
            source = "${projectDir}/images"
            bucket = "dev.assets.neo4j.com"
            destination = "course/${project.name}/images"
            acl.set(CannedAccessControlList.PublicRead)
          }
        } else if (stage == 'testing') {
          task s3UploadImages(type: S3UploadTask) {
            //overwrite = true
            source = "${projectDir}/images"
            bucket = "dev.assets.neo4j.com"
            destination = "test-course/${project.name}/images"
            acl.set(CannedAccessControlList.PublicRead)
          }
        }
      }

      if (stage == 'production' || stage == 'testing') {
        task wordPressUploadCourse(type: WordPressUploadTask) {
          dependsOn convertOnlineHtml
          source = convertOnlineHtml.outputs.files
          type = "course"
          status = stage == 'production' ? "publish" : "private"
        }
        task wordPressUploadEnrollment(type: WordPressUploadTask) {
          dependsOn convertEnrollmentHtml
          source = convertEnrollmentHtml.outputs.files
          type = "page"
          status = stage == 'production' ? "publish" : "private"
          template = "page-inner-100-mkto.php"
        }
        task wordPressUpload {
          dependsOn wordPressUploadCourse
          dependsOn wordPressUploadEnrollment
        }
      }
    }
  }

  task convertOnlineHtml(type: AsciidoctorTask) {
    dependsOn asciidoctorGemsPrepare, generateModuleDescriptor

    inputs.dir "${rootProject.projectDir}/resources/templates/course"

    asciidoctorj {
      def imagesdir = {
        switch (stage) {
          case 'production':
            return "https://s3.amazonaws.com/dev.assets.neo4j.com/course/${project.name}/images/"
          case 'testing':
            return "https://s3.amazonaws.com/dev.assets.neo4j.com/test-course/${project.name}/images/"
          default:
            return './images'
        }
      }
      requires "${rootProject.projectDir}/resources/extensions.rb"
      options template_dirs: ["${rootProject.projectDir}/resources/templates/course"]
      attributes 'imagesdir': imagesdir,
        'sectanchors': '',
        'intercom-app-id': 'dt0ig5ab'
    }

    if (stage != 'production' && stage != 'testing') {
      resources {
        from("${projectDir}/images") {
          include '**'
          into 'images'
        }
      }
    }

    baseDir file("${projectDir}/docs")
    sourceDir file("${projectDir}/docs")
    sources {
      exclude 'enrollment.adoc'
    }
    outputDir file("${projectDir}/build/online")
  }

  task convertEnrollmentHtml(type: AsciidoctorTask) {
    dependsOn asciidoctorGemsPrepare, generateModuleDescriptor

    inputs.dir "${rootProject.projectDir}/resources/templates/enrollment"

    asciidoctorj {
      requires "${rootProject.projectDir}/resources/extensions.rb"
      options template_dirs: ["${rootProject.projectDir}/resources/templates/enrollment"]
      attributes 'parent-path': '/graphacademy/online-training',
        'document-metadata-attrs-include': 'author,slug,parent-path',
        'module-course-url': courseUrl,
        'module-id': stage != 'production' ? "_testing_${project.name}" : project.name
    }

    baseDir file("${projectDir}/docs")
    sourceDir file("${projectDir}/docs")
    sources {
      include 'enrollment.adoc'
    }
    outputDir file("${projectDir}/build/enrollment")
  }

  task convertSlides(type: AsciidoctorJRevealJSTask) {
    dependsOn asciidoctorGemsPrepare

    revealjsOptions {
      controls = false
      progressBar = true
      pushToHistory = true
      overviewMode = true
      touchMode = true
      theme = 'white'
    }

    asciidoctorj {
      requires "${rootProject.projectDir}/resources/extensions.rb"
      options template_dirs: ["${rootProject.projectDir}/resources/templates/slide"]
      // for no transition between slides add this line after imagesdir:
      // 'revealjs_transition': 'none',
      attributes 'revealjs_customtheme': 'themes/reveal.css',
        'imagesdir': 'images',
        'revealjs_transition': 'none',
        'revealjs_center': 'false',
        'revealjs_width': '1280',
        'revealjs_height': '720',
        'revealjs_margin': '0.05',
        'revealjs_fragmentinurl': 'true',
        'revealjs_slidenumber': 'c',
        'revealjs_minscale': '0.2',
        'revealjs_maxscale': '2'
    }

    plugins 'denehyg/menu.js', 'rajgoel/chalkboard/chalkboard.js'
    pluginConfigurationFile "${rootProject.projectDir}/resources/extensions/revealjs-extension-config.js"

    baseDirFollowsSourceDir()
    sourceDir file("${projectDir}/docs")
    sources {
      exclude 'enrollment.adoc'
    }
    outputDir file("${projectDir}/build/slides")

    resources {
      from("${rootProject.projectDir}/resources/themes") {
        include 'reveal.css'
        into 'themes'
      }
      from("${rootProject.projectDir}/resources/extensions") {
        include 'cypher-highlightjs.js'
        into 'extensions'
      }
      from("${rootProject.projectDir}/resources/images") {
        include '**'
        into 'images'
      }
      from("${projectDir}/images") {
        include '**'
        into 'images'
      }
    }
  }

  task convertOnlinePdf(type: AsciidoctorPdfTask) {
    dependsOn asciidoctorGemsPrepare

    inputs.file "${rootProject.projectDir}/resources/themes/pdf-theme.yml"

    asciidoctorj {
      requires "${rootProject.projectDir}/resources/extensions.rb"
      modules.pdf.version '1.5.2'
      attributes 'pdf-style': "${rootProject.projectDir}/resources/themes/pdf-theme.yml",
        'imagesdir': '../images'
    }

    baseDir file("${projectDir}/docs")
    sourceDir file("${projectDir}/docs")
    sources {
      exclude 'enrollment.adoc'
    }
    outputDir file("${projectDir}/build/online")
  }

  /**
   * Copy svg images to "build/images-pdf" before generating a PDF.
   */
  task copySvgImagesPdf(type: Copy) {
    doFirst {
      mkdir "$buildDir/images-pdf"
    }

    from "${projectDir}/images"
    include '*.svg'
    into "$buildDir/images-pdf"
  }

  /**
   * Prepare the images before generating a PDF.
   *
   * Since high-resolution images consume a *lot* of memory while generating a PDF with Asciidoctor,
   * we downscale png and jpg/jpeg images using a max width and height in pixels.
   *
   * We rely on ImageMagick (more specifically `mogrify` command line) to downscale the images.
   * https://imagemagick.org/
   *
   * We also copy svg images to "build/images-pdf".
   */
  task prepareImagesPdf(type: Exec) {
    dependsOn copySvgImagesPdf

    inputs.dir "${projectDir}/images"
    inputs.files "${projectDir}/images/**"
    outputs.dir "$buildDir/images-pdf"
    outputs.files "$buildDir/images-pdf/**"

    workingDir "${projectDir}/images"

    def commandsArgs = []
    if (!fileTree("${projectDir}/images").filter { it.isFile() && it.getName().endsWith('.png') }.isEmpty()) {
      commandsArgs.push(['mogrify', '-path', "$buildDir/images-pdf", '-thumbnail', '1024x768>', '*.png'])
    }
    if (!fileTree("${projectDir}/images").filter { it.isFile() && it.getName().endsWith('.jpeg') }.isEmpty()) {
      commandsArgs.push(['mogrify', '-path', "$buildDir/images-pdf", '-thumbnail', '1024x768>', '*.jpeg'])
    }
    if (!fileTree("${projectDir}/images").filter { it.isFile() && it.getName().endsWith('.jpg') }.isEmpty()) {
      commandsArgs.push(['mogrify', '-path', "$buildDir/images-pdf", '-thumbnail', '1024x768>', '*.jpg'])
    }
    commandsArgs.push(['echo'])

    for (commandArgs in commandsArgs) {
      commandLine commandArgs
    }
  }

  /* single document */
  task convertSinglePdf(type: AsciidoctorPdfTask) {
    dependsOn asciidoctorGemsPrepare
    dependsOn prepareImagesPdf

    inputs.file "${rootProject.projectDir}/resources/themes/pdf-theme.yml"

    asciidoctorj {
      requires "${rootProject.projectDir}/resources/extensions.rb"
      inProcess 'IN_PROCESS'
      modules.pdf.version '1.5.2'
      attributes 'pdf-style': "${rootProject.projectDir}/resources/themes/pdf-theme.yml",
        'imagesdir': "${buildDir}/images-pdf"
    }

    baseDir file("${projectDir}/single-pdf")
    sourceDir file("${projectDir}/single-pdf")
    outputDir file("${projectDir}/build/single-pdf")
  }

  task convertSingleSlides(type: AsciidoctorJRevealJSTask) {
    dependsOn asciidoctorGemsPrepare

    revealjsOptions {
      controls = false
      progressBar = true
      pushToHistory = true
      overviewMode = true
      touchMode = true
      theme = 'white'
    }

    asciidoctorj {
      requires "${rootProject.projectDir}/resources/extensions.rb"
      options template_dirs: ["${rootProject.projectDir}/resources/templates/slide"]
      attributes 'revealjs_customtheme': 'themes/reveal.css',
        'imagesdir': 'images',
        'revealjs_center': 'false',
        'revealjs_width': '1280',
        'revealjs_height': '720',
        'revealjs_margin': '0.05',
        'revealjs_fragmentinurl': 'true',
        'revealjs_slidenumber': 'c',
        'revealjs_minscale': '0.2',
        'revealjs_maxscale': '2'
    }

    plugins 'denehyg/menu.js', 'rajgoel/chalkboard/chalkboard.js'
    pluginConfigurationFile "${rootProject.projectDir}/resources/extensions/revealjs-extension-config.js"

    baseDirFollowsSourceDir()
    sourceDir file("${projectDir}/single-slides")
    outputDir file("${projectDir}/build/single-slides")

    resources {
      from("${rootProject.projectDir}/resources/themes") {
        include 'reveal.css'
        into 'themes'
      }
      from("${rootProject.projectDir}/resources/extensions") {
        include 'cypher-highlightjs.js'
        into 'extensions'
      }
      from("${rootProject.projectDir}/resources/images") {
        include '**'
        into 'images'
      }
      from("${projectDir}/images") {
        include '**'
        into 'images'
      }
    }
  }

  task convert {
    dependsOn convertOnlineHtml
    dependsOn convertEnrollmentHtml
    dependsOn convertOnlinePdf
    dependsOn convertSlides
  }

  task liveReload(type: LiveReloadTask) {
    docRoot "${projectDir}/build"
  }

  task s3Upload dependsOn(tasks.names.findAll { it.startsWith("s3Upload") && it != "s3Upload" })
}

